version: '3'

services:
  postgres:
    container_name: "postgres"
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_DB}
    volumes:
      - postgres_storage_new:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - custom
    ports:
      - "15432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_NAME} -d ${DB_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3

  zookeeper:
    container_name: "zookeeper"
    platform: linux/x86_64
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - custom

  kafka:
    container_name: "kafka"
    platform: linux/x86_64
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - custom

  kafka-ui:
    container_name: "kafka-ui"
    image: provectuslabs/kafka-ui
    ports:
      - "8090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - zookeeper
      - kafka
    networks:
      - custom


  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: [ '/smit_app/docker/app.sh' ]
    env_file:
      - .env
    depends_on:
      - postgres
      - kafka
    ports:
      - '8000:8000'
    networks:
      - custom
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/default/ready" ]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  custom:
    driver: bridge

volumes:
  postgres_storage_new:
    driver: local
